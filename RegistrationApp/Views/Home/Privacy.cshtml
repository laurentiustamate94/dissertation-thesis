@using System.Text;
@using System.Security.Cryptography;
@{
    ViewData["Title"] = "Privacy Policy";
}
<h1>@ViewData["Title"]</h1>

<p>Use this page to detail your site's privacy policy.</p>

<div>
    @GenerateRandomId()<br /><br />
    @GenerateRandomId()<br /><br />
    @GenerateRandomId()<br /><br />
    @GenerateRandomId()<br /><br />
    @GenerateRandomId()<br /><br />
    @GenerateRandomId()<br /><br />
    @GenerateRandomId()<br /><br />
    @GenerateRandomId()<br /><br />
    @GenerateRandomId()<br /><br />
    @GenerateRandomId()<br /><br />
    @GenerateRandomId()<br /><br />
</div>

@functions{

       public static class RandomNumber
    {
        private static readonly RNGCryptoServiceProvider _generator = new RNGCryptoServiceProvider();
 
        public static int Next(int minimumValue, int maximumValue)
        {
            byte[] randomNumber = new byte[1];
 
            _generator.GetBytes(randomNumber);
 
            double asciiValueOfRandomCharacter = Convert.ToDouble(randomNumber[0]);
 
            // We are using Math.Max, and substracting 0.00000000001, 
            // to ensure "multiplier" will always be between 0.0 and .99999999999
            // Otherwise, it's possible for it to be "1", which causes problems in our rounding.
            double multiplier = Math.Max(0, (asciiValueOfRandomCharacter / 255d) - 0.00000000001d);
 
            // We need to add one to the range, to allow for the rounding done with Math.Floor
            int range = maximumValue - minimumValue + 1;
 
            double randomValueInRange = Math.Floor(multiplier * range);
 
            return (int)(minimumValue + randomValueInRange);
        }
    }

    private const string dict = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_";

    private string GenerateRandomId()
    {
        var ret = new StringBuilder();
        var max = RandomNumber.Next(1, 64);

        for (int i = 0; i < max; i++)
        {
            ret.Append(dict[RandomNumber.Next(0, 63)]);
        }

        return ret.ToString();
    }

}
